"""
Django settings for conf project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os, json
from django.core.exceptions import ImproperlyConfigured



# check
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
secert_file = os.path.join(BASE_DIR, 'secret.json')

with open(secert_file, 'r') as f:
    secrets = json.loads(f.read())

def get_secret(KEY, secrets=secrets):
    try:
        return secrets[KEY]
    except KeyError:
        error_msg = "Set the {} environment variable".format(KEY)
    raise ImproperlyConfigured(error_msg)

SECRET_KEY = get_secret("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites", # 소셜 로그인
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.naver", # 네이버
    "allauth.socialaccount.providers.google", # 구글
    "Page",
    "Upload",
    "bootstrap4",
    'django_extensions',
    "won",
    "Ai",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "conf.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR,'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "conf.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

ENGINE = get_secret("ENGINE")
HOST = get_secret("HOST")
NAME = get_secret("NAME")
PORT = get_secret("PORT")
USER = get_secret("USER")
PASSWORD = get_secret("PASSWORD")

DATABASES = {
    "default": {
        "ENGINE": ENGINE,
        'HOST' : HOST,
        "NAME": NAME,
        'PORT': PORT,
        'USER':USER,
        'PASSWORD':PASSWORD,
    }
}

AUTH_USER_MODEL = 'Page.User' # 재정의 User 모델 

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTHENTICATION_BACKENDS = [ # 소셜 로그인
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SOCIALACCOUNT_PROVIDERS = { # 소셜 로그인 - 구글
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'APP': {
        'client_id': '262062469053-vrrci2nr3nsjlh4elgokh1uqhonkl2am.apps.googleusercontent.com',
        'secret': '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',
        'key': '',
        'redirect_uri': 'https://127.0.0.1:8000/accounts/google/login/callback/'
        }
    },
    'naver': {
              'APP': {
            'client_id': 'QB2F4ilPEzY4Ru9rUPSU',
            'secret': '2a6KHVwO9i',
            'key': ''
        }
    }
}

SITE_ID = 1

ACCOUNT_SIGNUP_REDIRECT_URL = 'Page:index' # 소셜로그인 후 리디렉션 경로
LOGIN_REDIRECT_URL = 'Page:index' # 로그인 후 리디렉션 경로
ACCOUNT_LOGOUT_ON_GET = True # 로그아웃 버튼 클릭 시 자동 로그아웃

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

#LANGUAGE_CODE = "en-us"
LANGUAGE_CODE = 'ko-kr'

#TIME_ZONE = "UTC"
TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')